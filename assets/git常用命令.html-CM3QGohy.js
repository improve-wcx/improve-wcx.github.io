import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,e as a,o as s}from"./app-LCtBIzYo.js";const l={};function n(r,t){return s(),i("div",null,t[0]||(t[0]=[a(`<h1 id="git常用命令" tabindex="-1"><a class="header-anchor" href="#git常用命令"><span>git常用命令</span></a></h1><ul><li>git中文乱码</li></ul><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git config --global core.quotepath false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>reset常用</li></ul><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git reset [--soft | --mixed | --hard] [&lt;commit&gt;]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>--soft：会保留更改内容，暂存区和 HEAD 指向的当前分支的引用都不会改变。</span></span>
<span class="line"><span>--mixed：是默认选项，会保留更改内容，但是暂存区的内容会被清空到工作目录。</span></span>
<span class="line"><span>--hard：不保留任何更改，包括工作目录和暂存区的内容都会回滚到指定的 &lt;commit&gt; 状态。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>tag</li></ul><ol><li><p><code>git tag &lt;name&gt;</code>就可以打一个新标签:</p></li><li><p>可以用命令<code>git tag</code>查看所有标签:</p></li><li><p>默认标签是打在最新提交的commit上的。把标签打在特定版本上， <code>git tag v0.9 471fd27</code>。</p></li><li><p>命令<code>git tag</code>查看标签：注意，标签不是按时间顺序列出，而是按字母排序的。</p></li><li><p>可以用<code>git show &lt;tagname&gt;</code>查看标签信息：</p></li><li><p>上面我们打的tag是轻量级的也就是一般的tag没有注释，下面看看有注释的标签</p></li></ol><ul><li>创建带有说明的标签，用-a指定标签名，-m指定说明文字：<br><code>git tag -a v0.1 -m &quot;version 0.1 released push url&quot; d5a65e9</code></li></ul><ol start="7"><li><p>把本地仓库分支tag推送到远程服务器<br> 默认情况下，git push并不会把tag标签传送到远端服务器上，只有通过显式命令才能分享标签到远端仓库。<br><code>git push origin [tagname]</code></p></li><li><p>push所有tag，命令格式为：</p></li></ol><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git push [origin] --tags</span></span>
<span class="line"><span>git push --tags</span></span>
<span class="line"><span>或</span></span>
<span class="line"><span>git push origin --tags</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当远程有多个服务的时候远程服务名称是必须的，而如果远程只有一个远程服务则远程服务名称可以省略。</p><ol start="9"><li>通过标签恢复代码</li></ol><ul><li><p>查看标签的详情，找出打标签的那次提交的commit id</p></li><li><p>版本回退（将主干分支回退到某个版本）<br> git reset --hard d5a65e<br> 注意把d5a65e换成你的commid id。回退完毕,其实就是把head指针指向了制定版本位置</p></li><li><p>从当前tag拉分支</p></li></ul><p>当我们一次迭代上线前会对master分支打一个tag,这个tag作为回滚备份，然后将新需求分支合并到master在用master代码上线，如果最新master出现问题则我们可以从最新tag拉取分支。<br> (1) 切换到具体tag<br><code>git checkout tag_name </code><br> (2) 从tag拉取新分支<br><code>git branch &lt;new-branch-name&gt; &lt;tag-name&gt;</code><br> （3）从tag拉取新分支<br><code>git checkout -b branch_name tag_name</code><br> 切换到具体tag后使用2、3两种方式都能从当前tag拉取新分支，然后基于该分支进行bugfix,修复后可以再次合并到master;</p><ol start="10"><li><p>查看当前分支提交的log日志<br><code>git log</code><br> 可以看到只有第一次的提交记录了，因为这个时候版本回退了git log是查不到第三次提交记录的，怎么办呢，怎么才能回去呢？<br> 我们用下面这个命令：<br><code>git reflog</code><br> git reflog 相比git log能查询更多的日志信息，两个的具体区别之后再详细学习，反正使用git reflog 能查询到所有的日志commit id即使是删除的。</p></li><li><p>git log和git reflog 的区别<br> git reflog 可以查看所有分支的所有操作记录（包括commit和reset的操作），包括已经被删除的commit记录，git log则不能察看已经删除了的commit记录</p></li></ol>`,15)]))}const d=e(l,[["render",n],["__file","git常用命令.html.vue"]]),p=JSON.parse('{"path":"/posts/banana/other/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html","title":"git常用命令","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2022-01-05T00:00:00.000Z","category":["工具"],"tag":["黄"],"description":"git常用命令 git中文乱码 reset常用 tag git tag <name>就可以打一个新标签: 可以用命令git tag查看所有标签: 默认标签是打在最新提交的commit上的。把标签打在特定版本上， git tag v0.9 471fd27。 命令git tag查看标签：注意，标签不是按时间顺序列出，而是按字母排序的。 可以用git sho...","head":[["meta",{"property":"og:url","content":"https://improve-wcx.github.io/posts/banana/other/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"}],["meta",{"property":"og:site_name","content":"登峰造极"}],["meta",{"property":"og:title","content":"git常用命令"}],["meta",{"property":"og:description","content":"git常用命令 git中文乱码 reset常用 tag git tag <name>就可以打一个新标签: 可以用命令git tag查看所有标签: 默认标签是打在最新提交的commit上的。把标签打在特定版本上， git tag v0.9 471fd27。 命令git tag查看标签：注意，标签不是按时间顺序列出，而是按字母排序的。 可以用git sho..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-19T11:29:03.000Z"}],["meta",{"property":"article:tag","content":"黄"}],["meta",{"property":"article:published_time","content":"2022-01-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-19T11:29:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"git常用命令\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-05T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-19T11:29:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"王晨曦\\",\\"url\\":\\"https://improve-wcx.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1739963485000,"updatedTime":1739964543000,"contributors":[{"name":"晨曦001","username":"晨曦001","email":"chinawangchenxi@163.com","commits":2,"url":"https://github.com/晨曦001"}]},"readingTime":{"minutes":2.87,"words":861},"filePathRelative":"posts/banana/other/git常用命令.md","localizedDate":"2022年1月5日","excerpt":"\\n<ul>\\n<li>git中文乱码</li>\\n</ul>\\n<div class=\\"language-text line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"text\\" data-title=\\"text\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>git config --global core.quotepath false</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{d as comp,p as data};

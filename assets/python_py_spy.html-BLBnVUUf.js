import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,e as a,o as i}from"./app-LCtBIzYo.js";const p="/assets/img-20220912115250-D49nTYdd.png",t={};function l(r,n){return i(),e("div",null,n[0]||(n[0]=[a(`<h2 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h2><h2 id="python性能分析工具py-spy" tabindex="-1"><a class="header-anchor" href="#python性能分析工具py-spy"><span>python性能分析工具py-spy</span></a></h2><h3 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h3><p>用 top 的方式分析 Python 程序性能的工具。一款 Python 程序性能分析工具，它可以让你在不重启程序或修改代码的情况，直观地看到 Python 程序中每个函数花费的时间。</p><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 安装</span></span>
<span class="line"><span>pip install py-spy</span></span>
<span class="line"><span></span></span>
<span class="line"><span># record 命令将配置文件记录到文件中，可用来生成火焰图</span></span>
<span class="line"><span>py-spy record -o profile.svg --pid 进程ID</span></span>
<span class="line"><span></span></span>
<span class="line"><span># top 命令实时展示函数花费时间</span></span>
<span class="line"><span>py-spy top --pid 进程ID</span></span>
<span class="line"><span></span></span>
<span class="line"><span># dump 命令显示每个 Python 线程的当前调用堆栈</span></span>
<span class="line"><span>py-spy dump --pid 进程ID</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="命令行示例" tabindex="-1"><a class="header-anchor" href="#命令行示例"><span>命令行示例</span></a></h3><figure><img src="`+p+'" alt="Img" tabindex="0" loading="lazy"><figcaption>Img</figcaption></figure><h3 id="了解更多" tabindex="-1"><a class="header-anchor" href="#了解更多"><span>了解更多</span></a></h3><p><a href="https://github.com/benfred/py-spy" target="_blank" rel="noopener noreferrer">对应项目的github</a></p>',10)]))}const c=s(t,[["render",l],["__file","python_py_spy.html.vue"]]),h=JSON.parse('{"path":"/posts/banana/python/python_py_spy.html","title":"","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2022-01-05T00:00:00.000Z","category":["python"],"tag":["黄"],"description":"python性能分析工具py-spy 前言 用 top 的方式分析 Python 程序性能的工具。一款 Python 程序性能分析工具，它可以让你在不重启程序或修改代码的情况，直观地看到 Python 程序中每个函数花费的时间。 安装 命令行示例 ImgImg 了解更多 对应项目的github","head":[["meta",{"property":"og:url","content":"https://improve-wcx.github.io/posts/banana/python/python_py_spy.html"}],["meta",{"property":"og:site_name","content":"登峰造极"}],["meta",{"property":"og:description","content":"python性能分析工具py-spy 前言 用 top 的方式分析 Python 程序性能的工具。一款 Python 程序性能分析工具，它可以让你在不重启程序或修改代码的情况，直观地看到 Python 程序中每个函数花费的时间。 安装 命令行示例 ImgImg 了解更多 对应项目的github"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-19T11:29:03.000Z"}],["meta",{"property":"article:tag","content":"黄"}],["meta",{"property":"article:published_time","content":"2022-01-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-19T11:29:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-05T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-19T11:29:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"王晨曦\\",\\"url\\":\\"https://improve-wcx.github.io\\"}]}"]]},"headers":[{"level":2,"title":"","slug":"","link":"#","children":[]},{"level":2,"title":"python性能分析工具py-spy","slug":"python性能分析工具py-spy","link":"#python性能分析工具py-spy","children":[{"level":3,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":3,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":3,"title":"命令行示例","slug":"命令行示例","link":"#命令行示例","children":[]},{"level":3,"title":"了解更多","slug":"了解更多","link":"#了解更多","children":[]}]}],"git":{"createdTime":1739963485000,"updatedTime":1739964543000,"contributors":[{"name":"晨曦001","username":"晨曦001","email":"chinawangchenxi@163.com","commits":2,"url":"https://github.com/晨曦001"}]},"readingTime":{"minutes":0.63,"words":190},"filePathRelative":"posts/banana/python/python_py_spy.md","localizedDate":"2022年1月5日","excerpt":"<h2></h2>\\n<h2>python性能分析工具py-spy</h2>\\n<h3>前言</h3>\\n<p>用 top 的方式分析 Python 程序性能的工具。一款 Python 程序性能分析工具，它可以让你在不重启程序或修改代码的情况，直观地看到 Python 程序中每个函数花费的时间。</p>\\n<h3>安装</h3>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span># 安装</span></span>\\n<span class=\\"line\\"><span>pip install py-spy</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span># record 命令将配置文件记录到文件中，可用来生成火焰图</span></span>\\n<span class=\\"line\\"><span>py-spy record -o profile.svg --pid 进程ID</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span># top 命令实时展示函数花费时间</span></span>\\n<span class=\\"line\\"><span>py-spy top --pid 进程ID</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span># dump 命令显示每个 Python 线程的当前调用堆栈</span></span>\\n<span class=\\"line\\"><span>py-spy dump --pid 进程ID</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{c as comp,h as data};
